const express = require("express");
const {
  deploy_token,
  get_balance,
  transfer,
} = require("solana-agent-kit/dist/tools");
const { OpenAI } = require("openai");
const agent = require("./agent");
require("dotenv").config();
const { Connection, PublicKey } = require("@solana/web3.js");

const router = express.Router();

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

const connection = new Connection("https://api.mainnet-beta.solana.com");

router.post("/deploy-token", async (req, res) => {
  const { description, decimals, initialSupply } = req.body;

  if (!description) {
    return res.status(400).json({ error: "The 'description' field is required." });
  }

  try {
    const aiResponse = await openai.chat.completions.create({
      model: "gpt-4",
      messages: [
        {
          role: "system",
          content: "You are a blockchain expert helping to create tokens on Solana with optimal parameters.",
        },
        {
          role: "user",
          content: `I want to create a token on Solana. Description: "${description}". Help me with the name, symbol, and an example URI. Return a valid JSON within a code block.`,
        },
      ],
    });

    const aiSuggestion = aiResponse.choices[0]?.message?.content || "";

    const jsonMatch = aiSuggestion.match(/```json\n([\s\S]*?)\n```/);
    if (!jsonMatch || !jsonMatch[1]) {
      console.error("No valid JSON found in OpenAI response.");
      return res.status(500).json({
        error: "AI could not generate valid JSON. Please try again.",
        rawResponse: aiSuggestion,
      });
    }

    let parsedSuggestion;
    try {
      parsedSuggestion = JSON.parse(jsonMatch[1]);
    } catch (error) {
      console.error("Error parsing AI-generated JSON:", error.message);
      return res.status(500).json({
        error: "The JSON generated by AI is invalid.",
        rawResponse: jsonMatch[1],
      });
    }

    const { name, symbol, uri } = parsedSuggestion;

    if (!name || !symbol || !uri) {
      return res.status(500).json({
        error: "AI generated incomplete parameters.",
        suggestions: parsedSuggestion,
      });
    }

    const result = await deploy_token(agent, name, uri, symbol, decimals, initialSupply);

    res.json({
      success: true,
      mintAddress: result.mint.toString(),
      message: "Token successfully created with AI assistance.",
      suggestions: parsedSuggestion,
    });
  } catch (error) {
    console.error("Error creating token with AI:", error.message);
    res.status(500).json({ error: error.message || "Internal server error." });
  }
});

router.post("/transfer-token", async (req, res) => {
  const { from, to, amount, mint } = req.body;

  if (!from || !to || !amount || !mint) {
    return res.status(400).json({ error: "Required parameters are missing." });
  }

  try {
    const signature = await transfer(agent, to, amount, mint);
    res.json({
      success: true,
      signature,
      message: "Transfer completed successfully.",
    });
  } catch (error) {
    console.error("Error during transfer:", error.message);
    res.status(500).json({ error: error.message || "Internal server error." });
  }
});

router.get("/balance", async (req, res) => {
  try {
    const balance = await get_balance(agent);
    res.json({ success: true, balance });
  } catch (error) {
    console.error("Error fetching balance:", error);
    res.status(500).json({ error: error.message || "Internal server error." });
  }
});

router.post("/recommend", async (req, res) => {
  const { userPrompt } = req.body;

  if (!userPrompt) {
    return res.status(400).json({ error: "The 'userPrompt' field is required." });
  }

  try {
    const aiResponse = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        {
          role: "system",
          content: "You are an assistant providing recommendations for new users on Solana.",
        },
        { role: "user", content: userPrompt },
      ],
    });

    const suggestions =
      aiResponse.choices[0]?.message?.content || "No suggestions could be generated.";
    console.log(aiResponse);
    res.json({ success: true, suggestions });
  } catch (error) {
    console.error("Error with OpenAI:", error.message);
    res.status(500).json({ error: "Error generating recommendations." });
  }
});

module.exports = router;
